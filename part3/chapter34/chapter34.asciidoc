[[creating-a-service-catalog-bundle]]
== Creating a Service Catalog Bundle

We learnt in <<creating-a-service-catalog-item>> how to create service catalog items that enable our users to provision fully configured virtual machines from a single *Order* button.

We can populate our service catalog with useful items (see <<c34i1>>).

[[c34i1]]
.A service catalog containing three services
image::part3/chapter34/images/screenshot1hd.png[Screenshot,700,align="center"]

In these examples the virtual machines are provisioned from fully installed VMware templates, preconfigured with the application packages. The service dialog purely prompts for the Service and VM Names (see <<c34i2>>).

[[c34i2]]
.The service dialog for each catalog item
image::part3/chapter34/images/screenshot2hd.png[Screenshot,400,align="center"]

The next logical step is to be able to provision several items together as a single __service catalog bundle__.

=== Creating the Service Dialog for the Bundle

When we create a service catalog bundle, we handle the dialog input for each of the catalog items in a single service dialog that we create for the bundle. For our Web, Middleware and Database Server items, we must prompt for the VM name of each, but we'll also prompt for a service name (see <<c34i3>>).

[[c34i3]]
.The service dialog for a catalog bundle
image::part3/chapter34/images/screenshot3hd.png[Screenshot,400,align="center"]

We name the dialog elements according to the sequence in which we want our individual items provisioned. Our sequence will be:

1.  Database Server
2.  Middleware Server
3.  Web Server

Our four dialog elements are therefore constructed as follows. We'll create a text box element to prompt for Service Name (see <<c34i4>>).

[[c34i4]]
.Dialog element to prompt for service name
image::part3/chapter34/images/screenshot4hd.png[Screenshot,400,align="center"]

We add a second text box element to prompt for Web Server Name (see <<c34i5>>).

[[c34i5]]
.Dialog element to prompt for web server name
image::part3/chapter34/images/screenshot5hd.png[Screenshot,400,align="center"]

We add a third text box element to prompt for Middleware Server Name (see <<c34i6>>).

[[c34i6]]
.Dialog element to prompt for middleware server name
image::part3/chapter34/images/screenshot6hd.png[Screenshot,400,align="center"]

Finally we add a fourth text box element to prompt for Database Server Name (see <<c34i7>>).

[[c34i7]]
.Dialog element to prompt for database server name
image::part3/chapter34/images/screenshot7hd.png[Screenshot,400,align="center"]

The number in the element name reflects the sequence number, and the _CatalogItemInitialization_ and _CatalogBundleInitialization_ methods use this sequence number to pass the dialog value to the correct grandchild miq_request_task (see <<the-service-provisioning-state-machine>>).

The value *option_<n>_vm_name* is recognised and special-cased by _CatalogItemInitialization_, which sets both the +:vm_target_name+ and +:vm_target_hostname+ keys in the miq_request_task's options hash to the value input. 

The +:vm_target_name+ key sets the name of the resulting virtual machine. 

The +:vm_target_hostname+ key can be used to inject a Linux _hostname_ (i.e. FQDN) into a VMware Customization Specification, which can then set this in the virtual machine using VMware Tools on firstboot.

=== Preparing the Service Catalog Items

As we will be handling dialog input when the bundle is ordered, we need to edit each catalog item to set the *Catalog* to *<Unassigned>*, and the *Dialog* to *<No Dialog>*. We also _deselect_ the *Display in Catalog* option as we no longer want this item to be individually orderable (see <<c34i8>>).

[[c34i8]]
.Preparing the existing service catalog items
image::part3/chapter34/images/screenshot8hd.png[Screenshot,700,align="center"]

Once we've done this, the items will appear as **Unassigned** (see <<c34i9>>).

[[c34i9]]
.Unassigned catalog items
image::part3/chapter34/images/screenshot9hd.png[Screenshot,280,align="center"]

=== Creating the Service Catalog Bundle

Now we can go ahead and create our catalog bundle. Highlight a catalog name, and select **Configuration -> Add a New Catalog Bundle** (see <<c34i10>>).

[[c34i10]]
.Adding a new catalog bundle
image::part3/chapter34/images/screenshot10hd.png[Screenshot,600,align="center"]

Enter a name and description for the bundle, then select the *Display in Catalog* checkbox. Select an appropriate catalog, and the newly created bundle dialog, from the appropriate drop-downs.

For the Provisioning Entry Point, navigate to  _ManageIQ/Service/Provisioning/StateMachines/ServiceProvision_Template/CatalogBundleInitialization_ (see <<c34i12>>).

[[c34i12]]
.Service bundle basic info
image::part3/chapter34/images/screenshot11hd.png[Screenshot,700,align="center"]

Click on the *Details* tab, and enter some HTML-formatted text to describe the catalog item to anyone viewing in the catalog.

[source,html]
----
<h1>Three Tier Web Server Bundle</h1>  
<hr>  
<p>Deploy a <strong>Web, Middleware</strong> and <strong>Database</strong> \
                 server together as a single service</p>
----

Click on the *Resources* tab, and select each of the three unassigned catalog items to add them to the bundle (see <<c34i13>>).

[[c34i13]]
.Adding resources to the bundle
image::part3/chapter34/images/screenshot12hd.png[Screenshot,450,align="center"]

Change the *Action Order* and *Provisioning Order* according to our desired sequence ('3' won't be visible until '2' is set for an option) see <<c34i14>>. The sequence should match the *option_<n>_vm_name* sequence that we gave our dialog elements.

[[c34i14]]
.Setting the action and provision orders
image::part3/chapter34/images/screenshot13hd.png[Screenshot,700,align="center"]

Finally click the *Add* button.

Select a suitable sized icon for a custom image, and save.

=== Ordering the Catalog Bundle

Navigate to the *Service Catalogs* section in the accordion, expand the *VMware Services* catalog, and highlight the *Three Tier Web Server Bundle* catalog item (see <<c34i16>>).

[[c34i16]]
.Ordering the catalog bundle
image::part3/chapter34/images/screenshot14hd.png[Screenshot,700,align="center"]

Click **Order**, and fill out the service dialog values (see <<c34i17>>).

[[c34i17]]
.Entering the service and server names in the service dialog
image::part3/chapter34/images/screenshot15hd.png[Screenshot,400,align="center"]

Click *Submit*

After a new minutes, the new service should be visible in **My Services**, containing the new VMs (see <<c34i18>>).

[[c34i18]]
.The completed service
image::part3/chapter34/images/screenshot16hd.png[Screenshot,650,align="center"]

If we weren't watching the order that the VMs were created in, we could look in the database to check that our desired provisioning sequence was followed:

....
vmdb_production=# select id,name from vms order by id asc;
      id       |                     name
---------------+----------------------------------------------
...
 1000000000177 | jst-db01
 1000000000178 | jst-mid01
 1000000000179 | jst-web01
....

Here we see that the VMs were created (and named) in the correct order.

=== Summary

This has been a useful example that shows the flexibility of service catalogs to deploy entire application bundles. When we link this concept to a configuration management tool such as Puppet running from Red Hat Satellite 6, we start to really see the power of automation in our enterprise. We can deploy complex workloads from a single button click.

One of the cool features of service bundles is that we can mix and match catalog items that provision into different providers. For example we may have a Bimodal IT footnote:[http://www.gartner.com/it-glossary/bimodal/] infrastructure comprising RHEV for our traditional Mode 1 workloads, and an in-house OpenStack private cloud for our more cloud-ready Mode 2 workloads. Using ManageIQ service bundles we could provision our relatively static servers into RHEV, and our dynamically scalable mid-tier and frontend servers into OpenStack.

==== Further Reading

http://talk.manageiq.org/t/filtering-out-service-catalog-items-during-deployment/725[Filtering out service catalog items during deployment]
