[[working-with-virtual-machines]]
== Working with Virtual Machines

Our two Automate examples so far have been slightly abstract, but in this chapter we'll work with a real virtual machine. Our script will find and use the Automation Engine object representing the virtual machine, and we'll call one of the object's methods. Rather than running our script from simulation as we have up to now, we'll customise the WebUI display for our virtual machine and add a new toolbar button to run our script.

=== Custom Attributes

ManageIQ naturally collects a large amount of data about each virtual machine or instance that it manages, and displays this in the WebUI. We can examine such attributes as IP address, operating system, CPU count, or disk configuration for example, but sometimes it is useful to be able to add our own comments or notes to the virtual machine. ManageIQ allows us to do this in the form of _custom attributes_, which have two parts: a name (sometimes called the _key_) and a text string value (see <<c5i17>>).

[[c5i17]]
.Example custom attributes
image::part1/chapter5/images/screenshot17hd.png[Screenshot,500,align="center"]

[TIP]
Custom attributes are a useful way to store any related free-text information with an object, particularly a virtual machine. We might store a CMDB Configuration Item ID for example, or perhaps some text describing the configuration status. Virtual machine custom attributes are visible in the WebUI, and readable from an automation script.

In this example we'll create an Automate method that adds a custom attribute to a virtual machine. The attribute will be visible to any user who clicks on the virtual machine details in the WebUI.

We'll launch the Automate instance from a custom button that we'll add to the toolbar in the virtual machine details web frame, and we'll include a dialog to prompt for the text to add to the custom attribute.

=== Creating the Service Dialog

The first thing we must do is create the _service dialog_ to be displayed when our custom button is clicked. Creating a service dialog is a multi-stage process, involving the addition of tabs, boxes, and dialog elements such as text boxes, radio buttons, or drop-down lists.

Navigate to **Automate -> Customization**, select *Service Dialogs* in the accordion. Highlight __All Dialogs__, then select *Configuration -> Add a new Dialog* (don't click the *Add* button yet) (see <<c5i1>>).

[[c5i1]]
.Adding a new service dialog
image::part1/chapter5/images/screenshot1hd.png[Screenshot,450,align="center"]

Enter _Button_ for the dialog information *Label* and *Description*, check the *Submit* and *Cancel* options, and click *+ -> Add a new Tab to this Dialog* (don't click the *Add* button yet) (see <<c5i2>>).

[[c5i2]]
.Adding a new tab to the dialog
image::part1/chapter5/images/screenshot2hd.png[Screenshot,450,align="center"]

Enter _Main_ for the tab information *Label* and *Description*, and click *+ -> Add a new Box to this Tab* (don't click the *Add* button yet). Notice how the shape of the dialog dynamically builds in the lefthand _accordion_ pane (see <<c5i3>>).

[[c5i3]]
.Adding a new box to the tab
image::part1/chapter5/images/screenshot3hd.png[Screenshot,450,align="center"]

Enter _Custom Attribute_ for the box information *Label* and *Description*, and click *+ -> Add a new Element to this Box* (don't click the *Add* button yet). The dialog continues to take shape in the accordion (see <<c5i4>>).

[[c5i4]]
.Adding a new element to the box
image::part1/chapter5/images/screenshot4hd.png[Screenshot,450,align="center"]

We'll give the first element the *Label* of _Key_, the *Name* of _key_, and a *Type* of _Text Box_. Leave the other values as default (don't click the *Add* button yet). The *Key* attribute appears in the accordion as soon as we add the element Name (see <<c5i5>>).

[[c5i5]]
.Entering the element information
image::part1/chapter5/images/screenshot5hd.png[Screenshot,450,align="center"]

Click *+ -> Add a new Element to this Box* to create a second element. We'll give the second element the *Label* of _Value_, the *Name* of _value_, and a *Type* of _Text Box_. Leave the other values as default, and now, finally click the *Add* button. The completed dialog is saved and displayed (see <<c5i16>>).

[[c5i16]]
.The completed dialog
image::part1/chapter5/images/screenshot16hd.png[Screenshot,350,align="center"]

=== Creating the Instance and Method

We create a new instance in our _Methods_ class just as we did before, called __AddCustomAttribute__. We leave the **password**, *servername* and *username* schema fields blank, but add the value _add_custom_attribute_ in the *execute* field.

[TIP]
As we see here, defining attributes in our class schema doesn't mean that we have to use them in every instance created from the class. We can create generic class schemas that contain a number of attributes that the instances may need to use. 

==== The Code

Values entered into a dialog box are available to our method through +$evm.root+. The Automation Engine prefixes the dialog element names with "dialog_", so the values that we want to read are +$evm.root['dialog_key']+ and +$evm.root['dialog_value']+.

Our code for this example will be as follows:

[source,ruby]
----
$evm.log(:info, "add_custom_attribute started")
#
# Get the VM object
#
vm = $evm.root['vm']
#
# Get the dialog values
#
key   = $evm.root['dialog_key']
value = $evm.root['dialog_value']
#
# Set the custom attribute
#
vm.custom_set(key, value)
exit MIQ_OK
----

We create a new method in our _Methods_ class as we did before, and call it _add_custom_attribute_. We paste the code into the *Data* box, click *Validate*, then *Save*.

==== Create the /System Entry Point

To illustrate an alternative way of calling an instance, we're going to be creating our own entry point directly in the _/System/_ namespace, rather than redirecting through _Call_Instance_ as before footnote:[Most automation operations enter the Automate Datastore at _/System/Request_. _Call_Instance_ is already there as a "convenience" instance that we can call with arguments to redirect straight to our own instance, which is why we've used that up to now. There are occasions however when we need to create our own entry point directly in _/System/Request_, so this example illustrates how we do that.].

First we must copy the _ManageIQ/System/Request_ class into our own domain (see <<c5i7>>).

[[c5i7]]
.Copying the /System/Request class
image::part1/chapter5/images/screenshot7hd.png[Screenshot,450,align="center"]

Copy the class into the _ACME_ domain, and ensure that *Copy to same path* is selected.

Now we have to create a new instance of the class (see <<c5i8>>).

[[c5i8]]
.Adding a new instance to the copied /System/Request class
image::part1/chapter5/images/screenshot8hd.png[Screenshot,450,align="center"]

Give the new instance the name _AddCustomAttribute_. Enter _/General/Methods/AddCustomAttribute_ into the *rel1* field (see <<c5i9>>).

[[c5i9]]
.Setting the new instance name and rel1 field
image::part1/chapter5/images/screenshot9hd.png[Screenshot,380,align="center"]

=== Running Automation Scripts from a Button

ManageIQ allows us to extend the WebUI functionality by adding our own custom buttons to selected object types in the user interface. Rather than using the simulation feature of Automate as we did before, we're going to be launching this automation script from a custom button that we'll add to the virtual machine display object.

==== Creating the Button Group

Buttons are always displayed from a _Button Group_ drop-down list, so first we must create a new Button Group.

Navigate to **Automate -> Customization**, and select *Buttons* in the accordion. Now highlight **Object Types -> VM and Instance**, then select **Configuration -> Add a new Button Group** (see <<c5i10>>).

[[c5i10]]
.Adding a new button group
image::part1/chapter5/images/screenshot10hd.png[Screenshot,430,align="center"]

Set the *Button Group Text* and *Button Group Hover Text* to _VM Operations_. Select a suitable *Button Group Image* from the available drop-down list, and click the *Add* button to create the Button Group.

==== Creating the Button

Now that we have our Button Group, we can add a Button to it to call our script.

Highlight the new _VM Operations_ Button Group in the accordion, and select **Configuration -> Add a new Button** (see <<c5i11>>).

[[c5i11]]
.Adding a new button to the button group
image::part1/chapter5/images/screenshot11hd.png[Screenshot,430,align="center"]

Set the *Button Text* and *Button Hover Text* to _Add Custom Attribute_. Select a suitable *Button Image* from the available drop-down list, and pick our new _Button_ Dialog from the *Dialog* drop-down list. In the *Object Details* section we'll select the new _/System/Request_ instance that we created called _AddCustomAttribute_ (see <<c5i12>>).

[[c5i12]]
.Completing the button details
image::part1/chapter5/images/screenshot12hd.png[Screenshot,500,align="center"]

==== Running the Instance

If we navigate to a virtual machine in the WebUI and examine its details, we should see our new _VM Operations_ Button Group displayed in the toolbar. If we click the Button Group icon, we should see the button displayed as a drop-down (see <<c5i13>>).

[[c5i13]]
.The new button group and button added to the toolbar
image::part1/chapter5/images/screenshot13hd.png[Screenshot,450,align="center"]

If we click on the *Add Custom Attribute* button we should be presented with our dialog (see <<c5i14>>).

[[c5i14]]
.Completing the service dialog
image::part1/chapter5/images/screenshot14hd.png[Screenshot,430,align="center"]

Enter some text, click **Submit**, and wait a few seconds. We should see the new custom attribute displayed at the botton of the VM details pane (see <<c5i15>>).

[[c5i15]]
.The newly added custom attribute
image::part1/chapter5/images/screenshot15hd.png[Screenshot,450,align="center"]

=== Summary

In this chapter we've learnt several new useful skills. In our automation script we've seen how to work with the Automation Engine object representing a virtual machine. We've extended the WebUI functionality by creating a custom button, and we've added a service dialog to prompt our user for input. To top it off we've discovered the utility of custom attributes. Good work!

This has been a useful introduction to "real world" automation. Adding a custom button in this way to run a short automation script is fairly common in production environments. We would typically use a custom button to start a virtual machine backup, add a disk, reconfigure the number of CPUs or extend memory for example.

We can add buttons to the WebUI display toolbars for clusters, datastores, hosts and providers, but we most frequently add them to virtual machines as we have in this chapter, and services (which we cover in Part III).

==== Further Reading

https://access.redhat.com/articles/311753[ManageIQ: Using Custom Attributes]