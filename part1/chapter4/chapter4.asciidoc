[[using-schema-variables]]
== Using Schema Variables

Our simple HelloWorld instance in the previous chapter had a very simple schema, containing a single field that ran a simple self-contained method. As we become more adventurous with Automate, we'll find that it can be useful to associate variables or _attributes_ with an instance. Any Automate method run by the instance can read these instance attributes, allowing us to define variables or constants outside of our Ruby scripts. This simplifies maintenance and promotes code reuse. Methods can also write to these instance attributes, allowing a degree of data sharing between multiple methods that might be run in sequence from the same instance. 

In our next Automate example, we'll add some attribute fields to our class schema, set values for those attributes in our instance, and read them from our method. 

=== Preparing the Schema

Let's edit the schema of the _Methods_ Class (see <<c4i1>>).

[[c4i1]]
.Editing the schema of the methods class
image::part1/chapter4/images/screenshot1hd.png[Screenshot,450,align="center"]

We'll add three attributes, _servername_, _username_ and _password_. The _servername_ and _username_ attributes will be simple text strings, but the _password_ attribute will have a Data Type of *Password*, meaning it will be stored in an encrypted form in the database (see <<c4i2>>).

[[c4i2]]
.Adding attributes
image::part1/chapter4/images/screenshot2hd.png[Screenshot,450,align="center"]

Click *Save*. 

We need to ensure that the schema method (our _execute_ field) is listed _after_ the three new schema attributes in the field list, otherwise the attributes won't be visible to the method when it runs. If necessary, run *Configuration -> Edit sequence* to shuffle the schema fields up or down (see <<c4i4>>).

[[c4i4]]
.Editing a class schema sequence
image::part1/chapter4/images/screenshot4hd.png[Screenshot,420,align="center"]

=== The Instance
Now we'll create a new instance in our _Methods_ class as before, but this time called _GetCredentials_. We'll fill in some values for the _servername_, _username_ and _password_ schema attributes (see <<c4i5>>).

[[c4i5]]
.Entering the instance schema field details
image::part1/chapter4/images/screenshot5hd.png[Screenshot,280,align="center""]

Notice that our _password_ schema value has been obfuscated.

=== The Method

Each of the schema attributes will be available to our method as hash key/value pairs from +$evm.object+, which is the Automate object representing our currently running instance.

Our code for this example will be as follows:

[source,ruby]
----
$evm.log(:info, "get_credentials started")

servername = $evm.object['servername']
username   = $evm.object['username']
password   = $evm.object.decrypt('password')

$evm.log(:info, "Server: #{servername}, Username: #{username}, Password: \
#{password}")
exit MIQ_OK
----
We'll create a method in our _Methods_ class as we did before, but this time called _get_credentials_. We'll add our code to the *Data* box, click *Validate*, then *Save*.

=== Running the Instance

Finally we'll run the new instance through *Automate -> Simulation* again, invoking _Call_Instance_ once more with the appropriate Attribute/Value pairs (see <<c4i7>>).

[[c4i7]]
.Argument name/value pairs for Call_Instance
image::part1/chapter4/images/screenshot7hd.png[Screenshot,400,align="center"]

We check _automation.log_ and see that the attributes have been retrieved from the instance schema, and the password has been decrypted:

....
Invoking [inline] method [/ACME/General/Methods/get_credentials] with inputs [{}]
<AEMethod [/ACME/General/Methods/get_credentials]> Starting
<AEMethod get_credentials> get_credentials started
<AEMethod get_credentials> Server: myserver, Username: admin, Password: guess
<AEMethod [/ACME/General/Methods/get_credentials]> Ending
Method exited with rc=MIQ_OK
....

[NOTE]
The password value is encrypted using the _v2_key_ created when the ManageIQ database is initialised, and is unique to that ManageIQ Region. If we export an Automate Datastore containing encrypted passwords and import it into a different ManageIQ Region, we won't be able to decrypt the password.


=== Summary

In this chapter we've seen how we can store instance variables called _attributes_ in our schema, that can be accessed by the methods run from that instance.

Using class or instance schema variables like this is very common. One example is when we use ManageIQ to provision virtual machines. The out-of-the-box virtual machine provisioning workflow includes an approval stage (see <<approval>>), that allows us to define a default for the number of VMs, and their sizes (CPUs & Memory) that can be auto-provisioned without administrative approval. The values *max_vms*, *max_cpus* and *max_memory* used at this workflow stage are stored as schema attributes in the approval instance, and are therefore available to us to easily customise without changing any Ruby code.

When writing our own integration methods, we often need to specify a valid username and password to connect to other systems outside of ManageIQ, for example if making a SOAP call to a hardware load balancer (see <<calling-external-services>> for an example). We can use the technique shown in this example to securely store and retrieve credentials to connect to anything else in our Enterprise.

